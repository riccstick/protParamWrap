#!/bin/bash
#
# ARG_OPTIONAL_SINGLE([sequence],[s],[sequence file in .fasta format, including all sequences to process])
# ARG_HELP([The general script's help msg])
# ARG_OPTIONAL_REPEATED([include],[I],[Directory for temporary folders],['/tmp'])

# ARGBASH_GO

# [ <-- needed because of Argbash

#### Variables
SECONDS=0
TEMP="$_arg_include"
WPATH="$(pwd)"
sequenceNameNoExt=$(echo $_arg_sequence | cut -d "." -f 1)

### Functions
timeNeed () {
ELAPSED="$(($SECONDS / 3600))hrs $((($SECONDS / 60) % 60))min $(($SECONDS % 60))sec"
printf "|%-30s%30s|\n" "Program finished within:" "$ELAPSED"
}

check () {
#checks if seq and pdb file are given
emptyFormat="|%-60s|\n"
if [[ -z "$_arg_sequence" ]]; then
	printf "$emptyFormat" "       !no sequence.fasta given!"
	printf "$emptyFormat" "      press protParamWrap -h for help!"
else
    runScript
fi
}

seperateFasta () {
	printf "|%-60s|\n" "Seperating .fasta file into single files..."
	while read line
		do
    			if [[ ${line:0:1} == '>' ]]
    		then
        		outfile=${line#>}.fa
                outfile=$(echo $outfile | cut -d " " -f 1)
                outfile=$(echo $outfile.fa)
                echo $line > $outfile
    		else
        		echo $line >> $outfile
    		fi
	done < $_arg_sequence
	printf "|%-60s|\n" "..."
}

protParam () {
printf "|%-60s|\n" "Creating protParam files..."
fastaFile=$(ls *.fa)
for i in $fastaFile;do
	fastaName=$(echo $i | cut -d "." -f 1)
	seqFile1=$(cat $i | grep -v ">")
	seqFile2=$(echo $seqFile1 | tr -d '[:space:]')
	printf "#!/usr/local/bin/julia

using ProtParam
using BioSequences

sequence = aa\"$seqFile2\"
println(protparam(sequence))" > ${fastaName}-protParam.jl
done
printf "|%-60s|\n" "..."
}

protParamRun () {
printf "|%-60s|\n" "Calculating protein parameter based on sequence..."
juliaFile=$(ls *protParam.jl)
juliaFilenumber=$(echo $juliaFile | wc -w)
n=1
for i in $juliaFile;do
        printf "|%-60s|\n" "     Processing file $n of $juliaFilenumber"
        name=$(echo $i | cut -d "." -f 1)
        julia $i > $name.log
        n=$(echo $n + 1 | bc -l)
done
wait
printf "|%-60s|\n" "..."
}

getData () {
printf "|%-60s|\n" "Extracting data from protParam results..."
logFile=$(ls *protParam.log)
for i in $logFile;do
    name=$(echo $i | cut -d "-" -f 1)
    pI=$(cat $i | grep "pI" | awk {'print $3'} | tr -d '\n')
    MM=$(cat $i | grep "Molecular weight" | awk {'print $3'} | tr -d '\n')
    AA=$(cat $i | grep "amino acids in protein" | awk {'print $7'} | tr -d '\n')
    II=$(cat $i | grep "II" | awk {'print $5'} | tr -d '\n')
    neg=$(cat $i | grep "Total number of negatively charged residues" | awk {'print $10'} | tr -d '\n')
    pos=$(cat $i | grep "Total number of positively charged residues" | awk {'print $10'} | tr -d '\n')
    macox=$(cat $i | grep -A 1 "all pairs of Cys" | grep "E:" | awk {'print $2'} | tr -d '\n')
    macred=$(cat $i | grep -A 1 "all Cys residues are reduced" | grep "E:" | awk {'print $2'} | tr -d '\n')
    hmam=$(cat $i | grep "half-life in mammalian" | awk {'print $8'} | tr -d '\n')
    hcoli=$(cat $i | grep "half-life in yeast" | awk {'print $7'} | tr -d '\n')
    hyeast=$(cat $i | grep "half-life in Escherichia" | awk {'print $8'} | tr -d '\n')

    printf "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" "$name" "$II" "$MM" "$AA" "$pI" "$neg" "$pos" "$macox" "$macred" "$hmam" "$hcoli" "$hyeast" > ${name}-data.txt
done
printf "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" "sequence" "InstabilityIndex" "MolecularWeight (g mol-1)" "AminoAcids" "pI" "negative AA" "positive AA" "Extinction coefficient oxidized Cys (M-1 cm-1)" "Extinction coefficient reduced Cys (M-1 cm-1" "Half-life mammalian reticulocytes in vitro" "Half-life in yeast in vivo" "Half-life in E. coli in vivo" > summary.txt
dataFile=$(ls *data.txt)
for i in $dataFile;do
    cat $i >> summary.txt
done
printf "|%-60s|\n" "..."
}

cleanUp () {
#cleans up the directory
printf "|%-60s|\n" "Cleaning up directory..."
mkdir fastaFiles >/dev/null 2>/dev/null
mkdir logFiles >/dev/null 2>/dev/null
mkdir protParamFiles >/dev/null 2>/dev/null
mkdir dataFiles >/dev/null 2>/dev/null
mv *.fa fastaFiles >/dev/null 2>/dev/null
mv *.log logFiles >/dev/null 2>/dev/null
mv *.jl protParamFiles >/dev/null 2>/dev/null
mv *-data.txt dataFiles >/dev/null 2>/dev/null
printf "|%-60s|\n" "..."
}

### SCRIPT 
runScript () {
seperateFasta
protParam
protParamRun
getData
cleanUp
timeNeed
}
check
# ] <-- needed because of Argbash
