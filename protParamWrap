#!/bin/bash
#
# ARG_OPTIONAL_SINGLE([sequence],[s],[sequence file in .fasta format, including all sequences to process])
# ARG_HELP([The general script's help msg])
# ARG_OPTIONAL_REPEATED([include],[I],[Directory for temporary folders],['/tmp'])

# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='shI'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_sequence=
_arg_include=('/tmp')


print_help()
{
	printf '%s\n' "The general script's help msg"
	printf 'Usage: %s [-s|--sequence <arg>] [-h|--help] [-I|--include <arg>]\n' "$0"
	printf '\t%s\n' "-s, --sequence: sequence file in .fasta format, including all sequences to process (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\t%s' "-I, --include: Directory for temporary folders (default array elements:"
	printf " '%s'" '/tmp'
	printf ')\n'
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-s|--sequence)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_sequence="$2"
				shift
				;;
			--sequence=*)
				_arg_sequence="${_key##--sequence=}"
				;;
			-s*)
				_arg_sequence="${_key##-s}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			-I|--include)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_include+=("$2")
				shift
				;;
			--include=*)
				_arg_include+=("${_key##--include=}")
				;;
			-I*)
				_arg_include+=("${_key##-I}")
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


#### Variables
SECONDS=0
TEMP="$_arg_include"
WPATH="$(pwd)"
sequenceNameNoExt=$(echo $_arg_sequence | cut -d "." -f 1)

### Functions
timeNeed () {
ELAPSED="$(($SECONDS / 3600))hrs $((($SECONDS / 60) % 60))min $(($SECONDS % 60))sec"
printf "|%-30s%30s|\n" "Program finished within:" "$ELAPSED"
}

check () {
#checks if seq and pdb file are given
emptyFormat="|%-60s|\n"
if [[ -z "$_arg_sequence" ]]; then
	printf "$emptyFormat" "       !no sequence.fasta given!"
	printf "$emptyFormat" "      press protParamWrap -h for help!"
else
    runScript
fi
}

seperateFasta () {
	printf "|%-60s|\n" "Seperating .fasta file into single files..."
	while read line
		do
    			if [[ ${line:0:1} == '>' ]]
    		then
        		outfile=${line#>}.fa
			outfile=$(echo $outfile | cut -d " " -f 1)
			outfile=$(echo $outfile.fa)
        		echo $line > $outfile
    		else
        		echo $line >> $outfile
    		fi
	done < $_arg_sequence
	printf "|%-60s|\n" "..."
}

protParam () {
printf "|%-60s|\n" "Creating protParam files..."
fastaFile=$(ls *.fa)
for i in $fastaFile;do
	fastaName=$(echo $i | cut -d "." -f 1)
	seqFile1=$(cat $i | grep -v ">")
	seqFile2=$(echo $seqFile1 | tr -d '[:space:]')
	printf "#!/usr/local/bin/julia

using ProtParam
using BioSequences

sequence = aa\"$seqFile2\"
println(protparam(sequence))" > ${fastaName}-protParam.jl
done
printf "|%-60s|\n" "..."
}

protParamRun () {
printf "|%-60s|\n" "Calculating protein parameter based on sequence..."
juliaFile=$(ls *protParam.jl)
for i in $juliaFile;do
	name=$(echo $i | cut -d "." -f 1)
	julia $i > $name.log &
done
wait
printf "|%-60s|\n" "..."
}

getData () {
printf "|%-60s|\n" "Extracting data from protParam results..."
logFile=$(ls *protParam.log)
for i in $logFile;do
    name=$(echo $i | cut -d "-" -f 1)
    pI=$(cat $i | grep "pI" | awk {'print $3'} | tr -d '\n')
    MM=$(cat $i | grep "Molecular weight" | awk {'print $3'} | tr -d '\n')
    AA=$(cat $i | grep "amino acids in protein" | awk {'print $7'} | tr -d '\n')
    II=$(cat $i | grep "II" | awk {'print $5'} | tr -d '\n')
    printf "%s\t%s\t%s\t%s\t%s\n" "$name" "$II" "$MM" "$AA" "$pI" > ${name}-data.txt
done
printf "%s\t%s\t%s\t%s\t%s\n" "sequence" "InstabilityIndex" "MolecularWeight" "AminoAcids" "pI" > summary.txt
dataFile=$(ls *data.txt)
for i in $dataFile;do
    cat $i >> summary.txt
done
printf "|%-60s|\n" "..."
}

cleanUp () {
#cleans up the directory
printf "|%-60s|\n" "Cleaning up directory..."
mkdir fastaFiles >/dev/null 2>/dev/null
mkdir logFiles >/dev/null 2>/dev/null
mkdir protParamFiles >/dev/null 2>/dev/null
mkdir dataFiles >/dev/null 2>/dev/null
mv *.fa fastaFiles >/dev/null 2>/dev/null
mv *.log logFiles >/dev/null 2>/dev/null
mv *.jl protParamFiles >/dev/null 2>/dev/null
mv *-data.txt dataFiles >/dev/null 2>/dev/null
printf "|%-60s|\n" "..."
}

### SCRIPT
runScript () {
seperateFasta
protParam
protParamRun
getData
cleanUp
timeNeed
}
check
# ] <-- needed because of Argbash
